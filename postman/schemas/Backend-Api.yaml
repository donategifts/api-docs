openapi: '3.0.3'
info:
  version: '1'
  title: 'Backend'
  description: Donate gifts backend
servers:
  - url: https://ts-backend-dev-vbamtom7tq-uc.a.run.app
    description: dev server

paths:
  /user:
    get:
      summary: Get user data of logged in user
      responses:
        '200':
          description: the logged in user or nothing if no user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: create user with firebase data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
              required:
                - firstName
      responses:
        '200':
          description: the logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: the logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /agency: 
    get:
      summary: Gets the agency for the currently logged in user
      responses:
        '200':
          description: the agency or nothing if no agency exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agency'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: create agency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                bio:
                  type: string
                phone:
                  type: string
                website:
                  type: string
                address:
                  $ref: '#/components/schemas/Address'
                  required:
                    - street 
              required:
                - name
                - phone
                - website
                - address
      responses:
        '200':
          description: the logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /agency/addresses:
    get:
      summary: Gets all addresses of an agency of the logged in user
      responses:
        '200':
          description: the addresses or nothing if no address exists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /address/{id}:
    get:
      summary: Gets the address
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the address to get
      responses:
        '200':
          description: the address or nothing if no address exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /address:
    post:
      summary: Creates an address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: the address or nothing if no address exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /card:
    post:
      summary: Creates a card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Card'
      responses:
        '200':
          description: returns the created card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        uid:
          type: string
        role:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
          nullable: true
    Agency:
      type: object
      properties:
        name:
          type: string
        bio:
          type: string
        phone:
          type: string
        website:
          type: string
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        id:
          type: string
        street:
          type: string
        streetNumber:
          type: string
        additionalAddress:
          type: string
        zipcode:
          type: string
        city:
          type: string
        country: 
          type: string
        state:
          type: string
      required:
        - street
        - streetNumber
        - city
        - country
        - state
        - zipcode
    Card:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - "CHILD"
        itemUrl:
          type: string
        itemPrice:
          type: number
        status:
          type: string
          enum:
            - "DRAFT"
            - "PUBLISHED"
            - "DONATED"
        addressId:
          type: string
        birthday:
          type: string
        gender:
          type: string
          enum:
            - "MALE"
            - "FEMALE"
        firstName:
          type: string
        interest:
          type: string
        bio:
          type: string
        images:
          type: array
          items:
            type: object
            properties:
              path: 
                type: string
              isMainImage:
                type: boolean
            required:
              - path
              - isMainImage
      required:
        - type
        - status
        - itemUrl
        - itemPrice
        - addressId
        - firstName
        - images
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  securitySchemes:
    token:
      type: apiKey
      in: header
      name: authorization
      description: Firebase token in format "Bearer token"
security:
  - token: []